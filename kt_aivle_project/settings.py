"""
Django settings for kt_aivle_project project.

Generated by 'django-admin startproject' using Django 4.2.2.

For more information on this file, see
https://docs.djangoproject.com/en/4.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.2/ref/settings/
"""
from datetime import timedelta
from pathlib import Path
import os, json
from django.core.exceptions import ImproperlyConfigured
# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent
MEDIA_ROOT = os.path.join(BASE_DIR, 'media')
MEDIA_URL = '/media/'


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/4.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
env_list = dict()
local_env = open(os.path.join(BASE_DIR, '.env'))

while True:
    line = local_env.readline()
    if not line:
        break
    line = line.replace('\n', '')
    start = line.find('=')
    key = line[:start]
    value = line[start + 1:]
    env_list[key] = value

SECRET_KEY = env_list['SECRET_KEY']


# secrets.json 파일 불러오기
secret_file = os.path.join(BASE_DIR, 'secrets.json')

with open(secret_file) as f:
    secrets = json.loads(f.read())

def get_secret(setting, secrets=secrets):
    try:
        return secrets[setting]
    except KeyError:
        error_msg = "Set the {} environment variable".format(setting)
        raise ImproperlyConfigured(error_msg)
    
OPENAI_API_KEY = get_secret('openai_api_key')
HUGGINGFACE_API_KEY = get_secret('huggingface_api_key')
# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

AUTHENTICATION_BACKENDS = [
    'django.contrib.auth.backends.AllowAllUsersModelBackend',
]

ALLOWED_HOSTS = []

# Application definition

INSTALLED_APPS = [
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",
   
    #추가한 앱
    'userapp',
    "boards",
    "chat",
     
    #dj-rest-auth
    'rest_framework',
    'rest_framework.authtoken',
    'rest_framework_simplejwt.token_blacklist',
    'dj_rest_auth',
    'dj_rest_auth.registration',
    
    #django-allauth
    'allauth',
    'allauth.account',
    'allauth.socialaccount',
    
    #React 관련
    'corsheaders'  # CORS 추가
    
]
#dj-rest-auth 관련 환경 설정
REST_AUTH = {
    #jwt-token 관련
    # jwt 인증 방식을 사용할지 여부
    'USE_JWT': True, 
    # JWT_AUTH_HTTPONLY : 쿠키를 http only로 할 것인지 여부 (default == True)
    # 위 설정을 refresh token을 보안상의 이유로 http only 쿠키를 설정할 필요가 있다, refresh_token을 cookie로 전달
    
    # refresh token을 담은 쿠키 이름
    'JWT_AUTH_REFRESH_COOKIE': "refresh_token",
    #jwt쿠키 csrf 검사
    'JWT_AUTH_COOKIE_USE_CSRF' : True,
    #세션 로그인 기능 (default == True), 세션 로그인을 False로 하지 않으면 sessionid가 쿠키로 남기 때문에 지워주었다.
    'SESSION_LOGIN' : False,
    'JWT_AUTH_HTTPONLY':False,
    #custom한 serializer로 변경
    'REGISTER_SERIALIZER': 'userapp.serializers.CustomRegisterSerializer',


}

REST_FRAMEWORK = {
    """
    'DEFAULT_RENDERER_CLASSES': [
        'rest_framework.renderers.JSONRenderer',
    ],
    'DEFAULT_PARSER_CLASSES': [
        'rest_framework.parsers.JSONParser',
    ],
    """
    'DEFAULT_PERMISSION_CLASSES': (
        'rest_framework.permissions.IsAuthenticated',
    ),
    # "rest_framework.authentication.SessionAuthentication", 지우면 API 엔드포인트에서 로그인이 안되니 주의하자!!
    #'rest_framework.authentication.SessionAuthentication',
    'DEFAULT_AUTHENTICATION_CLASSES': (
        ['dj_rest_auth.jwt_auth.JWTCookieAuthentication']
    ),
    'DEFAULT_SCHEMA_CLASS': 'rest_framework.schemas.coreapi.AutoSchema'
}

EMAIL_BACKEND = 'django.core.mail.backends.console.EmailBackend'
SITE_ID = 1

ACCOUNT_EMAIL_REQUIRED = True
ACCOUNT_UNIQUE_EMAIL = True
ACCOUNT_USERNAME_REQUIRED = False
ACCOUNT_AUTHENTICATION_METHOD = 'email'
ACCOUNT_EMAIL_VERIFICATION = 'none'


MIDDLEWARE = [
    #corsheader
    'corsheaders.middleware.CorsMiddleware',     
    'django.middleware.common.CommonMiddleware',
    
    "django.middleware.security.SecurityMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
    
    ##"kt_aivle_project.utils.middleware.MoveJWTRefreshCookieIntoTheBody",
]

CORS_ALLOWED_ORIGINS = [
	# 허용할 Origin 추가
    "http://localhost:3000",
    'http://192.168.56.1:3000',
]

#script안에서의 리소스 요청을 허용할 도메인 추가

CORS_ALLOW_CREDENTIALS = True

CORS_ALLOW_METHODS = (  #<-실제 요청에 허용되는 HTTP 동사 리스트
    'DELETE',
    'GET',
    'OPTIONS',
    'PATCH',
    'POST',
    'PUT',
)

CORS_ALLOW_HEADERS = ( #<-실제 요청을 할 때 사용될 수 있는 non-standard HTTP 헤더 목록// 현재 기본값
    'accept',
    'accept-encoding',
    'authorization',
    'content-type',
    'dnt',
    'origin',
    'user-agent',
    'x-csrftoken',
    'x-requested-with',
    'Access-Control-Allow-Credentials',
    'Access-Control-Allow-Origin',
    
)

SIMPLE_JWT = {
    'JWT_SECRET_KEY': SECRET_KEY,   # JWT 에 서명하는데 사용되는 시크릿키. 장고의 시크릿키가 디폴트.
    'JWT_ALGORITHM': 'HS256',       # PyJWT 에서 암호화 서명에 지원되는 알고리즘으로 마찬가지로 이것 또한 기본값.
    'JWT_VERIFY_EXPIRATION' : True, # 토큰 만료 시간 확인. 기본값 True.
    'JWT_AUTH_HTTPONLY': True,
    
    'JWT_ALLOW_REFRESH': True,      # 토큰 새로고침 기능 활성화. 기본값 False.
    'ACCESS_TOKEN_LIFETIME': timedelta(minutes=5),
    'REFRESH_TOKEN_LIFETIME': timedelta(days=7),
    'ROTATE_REFRESH_TOKENS': False,
    'BLACKLIST_AFTER_ROTATION': True,
}

ROOT_URLCONF = "kt_aivle_project.urls"


TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [f'{BASE_DIR}/templates'],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.debug",
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
            ],
        },
    },
]

WSGI_APPLICATION = "kt_aivle_project.wsgi.application"


# Database
# https://docs.djangoproject.com/en/4.2/ref/settings/#databases
DATABASE_ROUTERS = ['kt_aivle_project.db_router.chatRouter']

DATABASES = {
    "default": {
        'ENGINE': 'django.db.backends.mysql',    
        'NAME': 'chatgpt_table',                 
        'USER': 'root',                          
        'PASSWORD': 'aivle',                  
        'HOST': '127.0.0.1',                    
        'PORT': '3306',                        
    },
    'chatdb': {
        'ENGINE': 'djongo',
        'ENFORCE_SCHEMA': True,
        'LOGGING': {
            'version': 1,
            'loggers': {
                'djongo': {
                    'level': 'DEBUG',
                    'propogate': False,                        
                }
            },
         },
        'NAME': 'messagedb',
        'CLIENT': {
            'host': 'mongodb+srv://mongoDB:okZZiN6PI16qYCZM@messagedb.fmcnovb.mongodb.net/?retryWrites=true&w=majority',
            'port': 27017,
            'username': 'mongoDB',
            'password': "okZZiN6PI16qYCZM",
            'authSource': 'admin',
            'authMechanism': 'SCRAM-SHA-1'
        }
    }
}

#User db Customer
AUTH_USER_MODEL = 'userapp.User'
#User Serializer Customer

# Password validation
# https://docs.djangoproject.com/en/4.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        "NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.MinimumLengthValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.CommonPasswordValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.NumericPasswordValidator",
    },
]


# Internationalization
# https://docs.djangoproject.com/en/4.2/topics/i18n/

LANGUAGE_CODE = "en-us"

TIME_ZONE = "Asia/Seoul"

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/4.2/howto/static-files/

STATIC_URL = "static/"

# Default primary key field type
# https://docs.djangoproject.com/en/4.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = "django.db.models.BigAutoField"
